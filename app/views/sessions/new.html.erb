<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>New User</title>

    <style>
    @-webkit-keyframes hvr-pulse-grow {
      to {
        -webkit-transform: scale(1.1);
        transform: scale(1.1);
      }
    }

    @keyframes hvr-pulse-grow {
      to {
        -webkit-transform: scale(1.1);
        transform: scale(1.1);
      }
    }

    img:hover {
      -webkit-animation-name: hvr-pulse-grow;
      animation-name: hvr-pulse-grow;
      -webkit-animation-duration: 0.3s;
      animation-duration: 0.3s;
      -webkit-animation-timing-function: linear;
      animation-timing-function: linear;
      -webkit-animation-iteration-count: infinite;
      animation-iteration-count: infinite;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }

      canvas {
        position:fixed;
        top:0;
        right:0;
        bottom:0;
        left:0;
        margin:0;
        box-sizing:border-box;
        width: 1500;
        height:auto;
      }

      form a {
        text-decoration: none;
      }

      input {
        padding: 4px;
        margin: 4px auto;
        color: black;
        text-align: center;
        font-size: 20px;
        font-family: courier;
        height: 30px;
        width: 350px;
        border-radius: 5px;
      }

      .button{
        color: white;
        padding: 15px;
        background-color: rgb(7, 45, 64);
        text-align: center;
        font-size: 20px;
        font-family: courier;
        height: 50px;
        width: 160px;
        vertical-align: middle;
        cursor: pointer;
      }

      .button:hover {
        background-color: rgb(93, 143, 230);
      }

      div.container {
        width: 500px;
        top: 45%;
        display: block;
        position: absolute;
        left: 50%;
        transform: translateX(-50%) translateY(-50%);
      }

      form {
        border-radius: 15px;
        box-shadow: 5px 5px 10px black;
        font-family: courier;
        background-color: cyan;
        text-align: center;
        width:  100%;
        padding: 15px;
        box-sizing: border-box;
        top: 40%;*/
        border: 3px solid black;
      }

      .errors {
        color: red;
        font-weight: 400;
        font-size: 20px;
      }

      ::-webkit-input-placeholder {
          color: grey;
      }

      .slam-logo {
        width: 100%;
        z-index: 1;
      }

      .modalDialog {
          position: fixed;
          font-family: courier;
          text-align: center;
          top: 0;
          right: 0;
          bottom: 0;
          left: 0;
          background: rgba(0, 0, 0, 0.8);
          z-index: 99999;
          opacity:0;
          /*-webkit-transition: opacity 400ms ease-in;*/
          -moz-transition: opacity 400ms ease-in;
          transition: opacity 400ms ease-in;
          pointer-events: none;
      }
      .modalDialog:target {
          opacity:1;
          pointer-events: auto;
      }
      .modalDialog > div {
          width: 600px;
          position: relative;
          margin: 10% auto;
          padding: 5px 20px 13px 20px;
          border-radius: 10px;
          background: #fff;
          background: -moz-linear-gradient(#fff, #999);
          background: -webkit-linear-gradient(#fff, #999);
          background: -o-linear-gradient(#fff, #999);
      }
      .close {
          background: #606061;
          color: #FFFFFF;
          line-height: 25px;
          position: absolute;
          right: -12px;
          text-align: center;
          top: -10px;
          width: 24px;
          text-decoration: none;
          font-weight: bold;
          -webkit-border-radius: 12px;
          -moz-border-radius: 12px;
          border-radius: 12px;
          -moz-box-shadow: 1px 1px 3px #000;
          -webkit-box-shadow: 1px 1px 3px #000;
          box-shadow: 1px 1px 3px #000;
      }
      .close:hover {
          background: #00d9ff;
      }

    </style>

  </head>
  <body>
    <canvas id="myCanvas">

    </canvas>
    <div class="container">
      <a href="#openModal">
        <img src="/assets/slam-logo.png" class="slam-logo" alt="" />
      </a>
      <form class="new-session-form" action="/session/" method="post">
        <%= auth_token_input %>
        <h1>Sign In</h1>
        <p class="errors"><%= flash[:errors].join("<br>").html_safe if flash[:errors] %></p>
        <input type="text" name="user[username]" placeholder="Pick a username">
        <br>
        <input type="password" name="user[password]" placeholder="Pick a password">
        <br>
        <input type="submit" class="button" id="submit" name="name" value="Log In">
        or
        <input type="submit" class="button" id="guest" name="name" value="Guest Login">
        <br>
        <br>
        <a href="<%= new_user_url %>">Not registered? Sign up here!</a>
      </form>
    </div>
    <div id="openModal" class="modalDialog">
      <div>	<a href="#close" title="Close" class="close">X</a>
        <h2>About FridgeSlam</h2>
        <p>
          Write poems.
          <br>
          One word at a time.
          <br>
          Alone or with friends.
        </p>
        <h3>How does it work?</h3>
        <p>
          Easy:
          <br>
          This first step is signing up.
          <br>
          Invite your friends!
        </p>
        <h3>Solo Slams:</h3>
        <p>
          Click on a word from the generated options
          as they appear to write your masterpiece.
          <br>
          When you’re done, give it a title.
          <br>
          Submit, share, like.
        </p>
        <h3>Group Slams:</h3>
        <p>
          Invite or get invited by friends to a Group Slam.
          <br>
          The initiator picks the title.
          <br>
          When it’s your turn, type in a word and add to the Slam.
          <br>
          When it’s done, you can see who put which words.
          <br>
          Submit, share, like.
        </p>
      </div>
    </div>

    <script type="text/javascript">
    (function () {
      if (typeof Circles === "undefined") {
        window.Circles = {};
      }

      var Circle = Circles.Circle = function (centerX, centerY, radius, color, word, font) {
        this.centerX = centerX;
        this.centerY = centerY;
        this.radius = radius;
        this.color = color;
        this.word = word;
        this.font = font;
      };


      Circle.randomCircle = function (maxX, maxY) {

        // var fonts = [
        //   'courier',
        //   'verdana',
        //   'georgia',
        // ];
        // var font = fonts[Math.floor(Math.random() * fonts.length)]
        var font = 'courier';
        var word = dictionary[Math.floor(Math.random()*dictionary.length)];
        var radius = (15 * word.length);
        return new Circle(
          maxX * Math.random(),
          maxY + radius,
          radius,
          Circle.randomColor(),
          word,
          font
        );
      };

      var HEX_DIGITS = "0123456789ABCDEF"
      Circle.randomColor = function () {
        var color = "#";
        for (var i = 0; i < 6; i++) {
          color += HEX_DIGITS[Math.floor((Math.random() * 16))];
        }

        return color;
      };

      Circle.prototype.moveRandom = function (maxX, maxY) {
        var dy = - (Math.random() * 0.1);
        this.centerY = (this.centerY + (dy * this.radius) * 0.2);
      };

      Circle.prototype.render = function (ctx) {
        ctx.fillStyle = this.color;
        ctx.beginPath();

        ctx.arc(
          this.centerX,
          this.centerY,
          this.radius,
          0,
          2 * Math.PI,
          false
        );

        ctx.fill();
        ctx.fillStyle = "white";

        ctx.font = "35px " + this.font;
        ctx.fillText(this.word, this.centerX - (this.word.length * 10), this.centerY + 10)
      };
        var Game = Circles.Game = function (xDim, yDim) {
          this.xDim = xDim;
          this.yDim = yDim;

          this.circles = [];

          window.setInterval((function () {
            this.circles.push(
              Circles.Circle.randomCircle(xDim, yDim, 1)
            );
        }).bind(this), 1000)
        };
        Game.prototype.render = function (ctx) {
          ctx.clearRect(0, 0, this.xDim, this.yDim);

          this.circles.forEach(function (circle) {
            if (circle.centerY < - (circle.radius)) {
              this.circles.splice(this.circles.indexOf(circle), 1);
            }
            circle.render(ctx);
          }.bind(this));
        };

        Game.prototype.moveCircles = function () {
          var game = this;
          this.circles.forEach(function (circle) {
            circle.moveRandom(game.xDim, game.yDim);
          });
        };

        Game.prototype.start = function (canvasEl) {
          // get a 2d canvas drawing context. The canvas API lets us call
          // a `getContext` method on a canvas DOM element.
          var ctx = canvasEl.getContext("2d");

          window.setInterval((function () {
            this.moveCircles();
            this.render(ctx);
          }).bind(this), 1000 / 70);
        };
      })();

      var canvasEl = document.getElementsByTagName("canvas")[0];
      canvasEl.height = window.innerHeight;
      canvasEl.width = window.innerWidth;
      new Circles.Game(
        canvasEl.width,
        canvasEl.height
      ).start(canvasEl);
    </script>
  </body>
</html>
